// Mocks generated by Mockito 5.4.6 from annotations
// in webtoon_diary/test/features/comic/presentation/comic_result_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:webtoon_diary/services/image_download_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ImageDownloadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageDownloadService extends _i1.Mock
    implements _i2.ImageDownloadService {
  MockImageDownloadService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> downloadAndSaveImage({
    required String? imageUrl,
    required String? fileName,
    _i2.ImageQuality? quality = _i2.ImageQuality.standard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadAndSaveImage,
          [],
          {
            #imageUrl: imageUrl,
            #fileName: fileName,
            #quality: quality,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #downloadAndSaveImage,
            [],
            {
              #imageUrl: imageUrl,
              #fileName: fileName,
              #quality: quality,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> downloadFromSupabaseStorage({
    required String? bucketName,
    required String? fileName,
    _i2.ImageQuality? quality = _i2.ImageQuality.standard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFromSupabaseStorage,
          [],
          {
            #bucketName: bucketName,
            #fileName: fileName,
            #quality: quality,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #downloadFromSupabaseStorage,
            [],
            {
              #bucketName: bucketName,
              #fileName: fileName,
              #quality: quality,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<List<_i5.File>> getSavedImages() => (super.noSuchMethod(
        Invocation.method(
          #getSavedImages,
          [],
        ),
        returnValue: _i3.Future<List<_i5.File>>.value(<_i5.File>[]),
      ) as _i3.Future<List<_i5.File>>);

  @override
  bool isImageFile(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #isImageFile,
          [filePath],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> deleteSavedImage(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #deleteSavedImage,
          [filePath],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> getStorageUsage() => (super.noSuchMethod(
        Invocation.method(
          #getStorageUsage,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  String formatStorageSize(int? bytes) => (super.noSuchMethod(
        Invocation.method(
          #formatStorageSize,
          [bytes],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #formatStorageSize,
            [bytes],
          ),
        ),
      ) as String);
}
